{
    "$schema": "https://ui.shadcn.com/schema/registry-item.json",
    "name": "feedback-widget",
    "type": "registry:ui",
    "title": "Feedback Widget",
    "description": "An interactive feedback widget with emoji satisfaction ratings, expandable comment section, and smooth animations.",
    "dependencies": [
        "framer-motion",
        "lucide-react"
    ],
    "files": [
        {
            "path": "components/ace-ui/feedback-widget.tsx",
            "type": "registry:ui",
            "target": "components/ui/feedback-widget.tsx",
            "content": "\"use client\";\nimport { Angry, Check, Frown, Laugh, Loader2, Smile, X } from \"lucide-react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\n\nconst SATISFACTION_LEVELS = [\n    {\n        level: 4,\n        emoji: Laugh,\n        color: \"text-green-600\",\n        label: \"Excellent\",\n        hoverColor: \"hover:bg-green-50 dark:hover:bg-green-900/20\"\n    },\n    {\n        level: 3,\n        emoji: Smile,\n        color: \"text-green-400\",\n        label: \"Good\",\n        hoverColor: \"hover:bg-green-50 dark:hover:bg-green-900/20\"\n    },\n    {\n        level: 2,\n        emoji: Frown,\n        color: \"text-yellow-400\",\n        label: \"Fair\",\n        hoverColor: \"hover:bg-yellow-50 dark:hover:bg-yellow-900/20\"\n    },\n    {\n        level: 1,\n        emoji: Angry,\n        color: \"text-red-600\",\n        label: \"Poor\",\n        hoverColor: \"hover:bg-red-50 dark:hover:bg-red-900/20\"\n    },\n];\n\nexport const FeedbackWidget = () => {\n    const commentTextareaRef = useRef<HTMLTextAreaElement>(null);\n    const [selectedSatisfactionLevel, setSelectedSatisfactionLevel] = useState<null | number>(null);\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n    const { submitUserFeedback, isSubmitting, isSuccessfullySubmitted } = useFeedbackSubmission();\n\n    // Clear textarea when satisfaction level is deselected\n    useEffect(() => {\n        if (!selectedSatisfactionLevel && commentTextareaRef.current) {\n            commentTextareaRef.current.value = \"\";\n        }\n    }, [selectedSatisfactionLevel]);\n\n    // Handle successful submission\n    useEffect(() => {\n        let resetFormTimeout: NodeJS.Timeout;\n        let hideSuccessTimeout: NodeJS.Timeout;\n\n        if (isSuccessfullySubmitted) {\n            setShowSuccessMessage(true);\n\n            // Reset form after 2 seconds\n            resetFormTimeout = setTimeout(() => {\n                setSelectedSatisfactionLevel(null);\n                if (commentTextareaRef.current) {\n                    commentTextareaRef.current.value = \"\";\n                }\n            }, 2000);\n\n            // Hide success message after 2.2 seconds\n            hideSuccessTimeout = setTimeout(() => {\n                setShowSuccessMessage(false);\n            }, 2200);\n        }\n\n        return () => {\n            clearTimeout(resetFormTimeout);\n            clearTimeout(hideSuccessTimeout);\n        };\n    }, [isSuccessfullySubmitted]);\n\n    const handleSatisfactionSelect = (level: number) => {\n        setSelectedSatisfactionLevel(prev => level === prev ? null : level);\n    };\n\n    const handleSubmitFeedback = () => {\n        if (!selectedSatisfactionLevel) return;\n\n        const comment = commentTextareaRef.current?.value || \"\";\n        submitUserFeedback(selectedSatisfactionLevel, comment);\n    };\n\n    const handleCloseFeedback = () => {\n        setSelectedSatisfactionLevel(null);\n    };\n\n    return (\n        <motion.div\n            layout\n            initial={{ borderRadius: \"2rem\" }}\n            animate={selectedSatisfactionLevel ? { borderRadius: \"0.5rem\" } : { borderRadius: \"2rem\" }}\n            className=\"w-fit overflow-hidden border border-gray-200 bg-white py-2 shadow-lg dark:border-neutral-800 dark:bg-neutral-950\"\n        >\n            {/* Header Section */}\n            <div className=\"flex items-center justify-between pl-4 pr-2\">\n                <div className=\"flex items-center gap-3\">\n                    <div className=\"text-sm font-medium text-gray-700 dark:text-neutral-300\">\n                        Tell us what you think!\n                    </div>\n\n                    {/* Satisfaction Rating Buttons */}\n                    <div className=\"flex items-center gap-1\">\n                        {SATISFACTION_LEVELS.map((satisfactionOption) => {\n                            const EmojiIcon = satisfactionOption.emoji;\n                            const isSelected = selectedSatisfactionLevel === satisfactionOption.level;\n\n                            return (\n                                <button\n                                    key={satisfactionOption.level}\n                                    onClick={() => handleSatisfactionSelect(satisfactionOption.level)}\n                                    className={`\n                    flex h-9 w-9 items-center justify-center rounded-full transition-all duration-200\n                    ${isSelected\n                                            ? `${satisfactionOption.color} scale-110 shadow-md`\n                                            : `text-gray-400 dark:text-neutral-500 ${satisfactionOption.hoverColor}`\n                                        }\n                  `}\n                                    title={satisfactionOption.label}\n                                    aria-label={`Rate as ${satisfactionOption.label}`}\n                                >\n                                    <EmojiIcon size={18} />\n                                </button>\n                            );\n                        })}\n                    </div>\n                </div>\n\n                {/* Close Button (only show when expanded) */}\n                {selectedSatisfactionLevel && (\n                    <button\n                        onClick={handleCloseFeedback}\n                        className=\"flex h-6 w-6 items-center justify-center rounded-full text-gray-400 hover:bg-gray-100 hover:text-gray-600 dark:hover:bg-neutral-800 dark:hover:text-neutral-300\"\n                        aria-label=\"Close feedback form\"\n                    >\n                        <X size={14} />\n                    </button>\n                )}\n            </div>\n\n            {/* Expandable Comment Section */}\n            <motion.div\n                aria-hidden={!selectedSatisfactionLevel}\n                initial={{ height: 0, opacity: 0 }}\n                animate={selectedSatisfactionLevel ? { height: \"auto\", opacity: 1 } : { height: 0, opacity: 0 }}\n                transition={{ duration: 0.3, ease: \"easeInOut\" }}\n                className=\"overflow-hidden px-4\"\n            >\n                <div className=\"pt-3\">\n                    <AnimatePresence mode=\"wait\">\n                        {!showSuccessMessage ? (\n                            <motion.div\n                                key=\"feedback-form\"\n                                initial={{ opacity: 0, y: 10 }}\n                                animate={{ opacity: 1, y: 0 }}\n                                exit={{ opacity: 0, y: -10 }}\n                                transition={{ duration: 0.2 }}\n                                className=\"space-y-3\"\n                            >\n                                {/* Comment Textarea */}\n                                <div>\n                                    <label htmlFor=\"feedback-comment\" className=\"sr-only\">\n                                        Additional comments\n                                    </label>\n                                    <textarea\n                                        id=\"feedback-comment\"\n                                        ref={commentTextareaRef}\n                                        placeholder=\"Tell us more about your experience (optional)\"\n                                        className=\"min-h-24 w-80 resize-none rounded-lg border border-gray-200 bg-transparent p-3 text-sm placeholder-gray-400 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500/20 dark:border-neutral-700 dark:placeholder-neutral-500 dark:focus:border-blue-400\"\n                                        rows={3}\n                                    />\n                                </div>\n\n                                {/* Submit Button */}\n                                <div className=\"flex justify-end\">\n                                    <button\n                                        onClick={handleSubmitFeedback}\n                                        disabled={isSubmitting}\n                                        className={`\n                      flex h-10 items-center justify-center rounded-lg px-6 text-sm font-medium transition-all duration-200\n                      ${isSubmitting\n                                                ? \"cursor-not-allowed bg-gray-300 text-gray-500 dark:bg-neutral-700 dark:text-neutral-400\"\n                                                : \"bg-blue-600 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500/20 dark:bg-blue-500 dark:hover:bg-blue-600\"\n                                            }\n                    `}\n                                        aria-label=\"Submit feedback\"\n                                    >\n                                        {isSubmitting ? (\n                                            <>\n                                                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                                                Submitting...\n                                            </>\n                                        ) : (\n                                            \"Submit Feedback\"\n                                        )}\n                                    </button>\n                                </div>\n                            </motion.div>\n                        ) : (\n                            <motion.div\n                                key=\"success-message\"\n                                variants={successAnimationContainer}\n                                initial=\"hidden\"\n                                animate=\"visible\"\n                                className=\"flex h-32 w-80 flex-col items-center justify-center gap-3 text-center\"\n                            >\n                                <motion.div\n                                    variants={successAnimationItem}\n                                    className=\"flex h-12 w-12 items-center justify-center rounded-full bg-green-500 shadow-lg dark:bg-green-600\"\n                                >\n                                    <Check strokeWidth={2.5} size={20} className=\"text-white\" />\n                                </motion.div>\n                                <motion.div variants={successAnimationItem} className=\"space-y-1\">\n                                    <div className=\"text-sm font-semibold text-gray-900 dark:text-white\">\n                                        Thank you for your feedback!\n                                    </div>\n                                    <div className=\"text-xs text-gray-600 dark:text-neutral-400\">\n                                        Your input helps us improve our service.\n                                    </div>\n                                </motion.div>\n                            </motion.div>\n                        )}\n                    </AnimatePresence>\n                </div>\n            </motion.div>\n        </motion.div>\n    );\n};\n\n// Animation variants for success message\nconst successAnimationContainer = {\n    hidden: { opacity: 0 },\n    visible: {\n        opacity: 1,\n        transition: {\n            duration: 0.3,\n            staggerChildren: 0.1,\n        },\n    },\n};\n\nconst successAnimationItem = {\n    hidden: { y: 20, opacity: 0 },\n    visible: { y: 0, opacity: 1 },\n};\n\n// Custom hook for handling feedback submission\nconst useFeedbackSubmission = () => {\n    const [submissionData, setSubmissionData] = useState<{\n        satisfactionLevel: number;\n        comment: string;\n    } | null>(null);\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [submissionError, setSubmissionError] = useState<string | null>(null);\n    const [isSuccessfullySubmitted, setIsSuccessfullySubmitted] = useState(false);\n\n    // Mock API call - replace with actual API endpoint\n    const mockFeedbackAPI = () =>\n        new Promise<void>((resolve, reject) => {\n            setTimeout(() => {\n                // Simulate occasional failures for testing\n                if (Math.random() > 0.9) {\n                    reject(new Error(\"Network error\"));\n                } else {\n                    resolve();\n                }\n            }, 1000 + Math.random() * 1000); // Random delay between 1-2 seconds\n        });\n\n    useEffect(() => {\n        if (!submissionData) return;\n\n        setIsSubmitting(true);\n        setIsSuccessfullySubmitted(false);\n        setSubmissionError(null);\n\n        mockFeedbackAPI()\n            .then(() => {\n                setIsSuccessfullySubmitted(true);\n                console.log(\"Feedback submitted successfully:\", submissionData);\n            })\n            .catch((error) => {\n                setSubmissionError(error.message || \"Failed to submit feedback\");\n                console.error(\"Feedback submission failed:\", error);\n            })\n            .finally(() => {\n                setIsSubmitting(false);\n            });\n    }, [submissionData]);\n\n    const submitUserFeedback = (satisfactionLevel: number, comment: string) => {\n        setSubmissionData({ satisfactionLevel, comment });\n    };\n\n    return {\n        submitUserFeedback,\n        isSubmitting,\n        submissionError,\n        isSuccessfullySubmitted,\n    };\n};"
        }
    ]
}