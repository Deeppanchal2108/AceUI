{
    "$schema": "https://ui.shadcn.com/schema/registry-item.json",
    "name": "dropdown-menu",
    "type": "registry:ui",
    "title": "Dropdown Menu",
    "description": "A customizable dropdown menu component with trigger button, menu items, and optional action button.",
    "dependencies": [
        "lucide-react"
    ],
    "files": [
        {
            "path": "components/ace-ui/DropdownMenu.tsx",
            "type": "registry:ui",
            "target": "components/ui/dropdown-menu.tsx",
            "content": "\"use client\";\nimport { useState, useRef, useEffect } from 'react';\nimport { LucideIcon } from 'lucide-react';\nimport {\n\n    MoreHorizontal,\n\n} from 'lucide-react';\n\ninterface MenuItem {\n    icon: LucideIcon;\n    label: string;\n    id: string;\n    href?: string;\n    external?: boolean;\n    disabled?: boolean;\n}\n\ninterface DropdownMenuProps {\n    triggerIcon?: LucideIcon;\n    triggerText?: string;\n    menuItems?: MenuItem[];\n    buttonText?: string;\n    buttonHref?: string;\n    buttonExternal?: boolean;\n    className?: string;\n    triggerClassName?: string;\n    menuClassName?: string;\n    itemClassName?: string;\n    buttonClassName?: string;\n    position?: 'left' | 'right' | 'center';\n    width?: string;\n    iconSize?: string;\n    triggerIconSize?: string;\n    disabled?: boolean;\n}\n\nexport const DropdownMenu: React.FC<DropdownMenuProps> = ({\n    triggerIcon: TriggerIcon = MoreHorizontal,\n    triggerText = \"More\",\n    menuItems = [],\n    buttonText = \"Post\",\n    buttonHref = \"/post\",\n    buttonExternal = false,\n    className = \"\",\n    triggerClassName = \"\",\n    menuClassName = \"\",\n    itemClassName = \"\",\n    buttonClassName = \"\",\n    position = \"left\",\n    width = \"w-72\",\n    iconSize = \"w-5 h-5\",\n    triggerIconSize = \"w-5 h-5\",\n    disabled = false\n}) => {\n    const [isOpen, setIsOpen] = useState<boolean>(false);\n    const dropdownRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        const handleClickOutside = (event: MouseEvent) => {\n            if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n                setIsOpen(false);\n            }\n        };\n\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, []);\n\n    const handleItemClick = (item: MenuItem): void => {\n        if (item.disabled) return;\n\n        setIsOpen(false);\n\n        if (item.href) {\n            if (item.external) {\n                const newWindow = window.open(item.href, '_blank', 'noopener,noreferrer');\n                if (newWindow) newWindow.focus();\n            } else {\n                // Use setTimeout to ensure dropdown closes first\n                setTimeout(() => {\n                    window.location.href = item.href!;\n                }, 100);\n            }\n        }\n    };\n\n    const handleButtonClick = (): void => {\n        setIsOpen(false);\n\n        if (buttonHref) {\n            if (buttonExternal) {\n                const newWindow = window.open(buttonHref, '_blank', 'noopener,noreferrer');\n                if (newWindow) newWindow.focus();\n            } else {\n                // Use setTimeout to ensure dropdown closes first\n                setTimeout(() => {\n                    window.location.href = buttonHref;\n                }, 100);\n            }\n        }\n    };\n\n    const getPositionClasses = (): string => {\n        switch (position) {\n            case 'right':\n                return 'right-0';\n            case 'center':\n                return 'left-1/2 transform -translate-x-1/2';\n            default:\n                return 'left-0';\n        }\n    };\n\n    return (\n        <div className={`relative inline-block ${className}`} ref={dropdownRef}>\n            {/* Trigger Button */}\n            <button\n                onClick={() => !disabled && setIsOpen(!isOpen)}\n                disabled={disabled}\n                className={`flex items-center gap-3 px-6 py-3 bg-white border border-gray-200 rounded-full shadow-sm hover:shadow-md transition-all duration-200 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed ${triggerClassName}`}\n            >\n                <TriggerIcon className={`text-gray-600 ${triggerIconSize}`} />\n                <span className=\"text-gray-800 font-medium\">{triggerText}</span>\n            </button>\n\n            {/* Dropdown Menu */}\n            {isOpen && (\n                <div className={`absolute top-full mt-2 ${width} bg-white rounded-2xl shadow-2xl border border-gray-100 overflow-hidden z-50 transform transition-all duration-200 ease-out origin-top scale-100 opacity-100 ${getPositionClasses()} ${menuClassName}`}>\n                    <div className=\"py-2\">\n                        {menuItems.map((item: MenuItem, index: number) => {\n                            const IconComponent = item.icon;\n                            return (\n                                <button\n                                    key={index}\n                                    onClick={() => handleItemClick(item)}\n                                    disabled={item.disabled}\n                                    className={`w-full flex items-center gap-4 px-6 py-4 text-left hover:bg-gray-50 transition-colors duration-150 group disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-transparent ${itemClassName}`}\n                                >\n                                    <div className=\"flex-shrink-0 w-10 h-10 rounded-full bg-gray-100 flex items-center justify-center group-hover:bg-gray-200 transition-colors duration-150 group-disabled:group-hover:bg-gray-100\">\n                                        <IconComponent className={`text-gray-600 ${iconSize}`} />\n                                    </div>\n                                    <span className=\"text-gray-800 font-medium text-base\">\n                                        {item.label}\n                                    </span>\n                                </button>\n                            );\n                        })}\n                    </div>\n\n                    {/* Action Button */}\n                    {buttonText && (\n                        <div className=\"px-4 pb-4 pt-2 border-t border-gray-100\">\n                            <button\n                                onClick={handleButtonClick}\n                                className={`w-full bg-blue-500 hover:bg-blue-600 text-white font-semibold py-3 px-6 rounded-full transition-colors duration-200 shadow-sm hover:shadow-md ${buttonClassName}`}\n                            >\n                                {buttonText}\n                            </button>\n                        </div>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};"
        }
    ]
}